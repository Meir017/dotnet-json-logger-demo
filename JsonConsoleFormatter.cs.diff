1,4d0
< // Licensed to the .NET Foundation under one or more agreements.
< // The .NET Foundation licenses this file to you under the MIT license.
< 
< using System;
6c2
< using System.Collections.Generic;
---
> using System.Diagnostics;
9c5,6
< using System.IO;
---
> using System.IO.Pipelines;
> using System.Runtime.CompilerServices;
16c13
< namespace Microsoft.Extensions.Logging.Console
---
> namespace DotnetJsonLoggerDemo
18c15
<     internal sealed class JsonConsoleFormatter : ConsoleFormatter, IDisposable
---
>     internal sealed class SimpleJsonConsoleFormatter : ConsoleFormatter, IDisposable
22,23c19,20
<         public JsonConsoleFormatter(IOptionsMonitor<JsonConsoleFormatterOptions> options)
<             : base(ConsoleFormatterNames.Json)
---
>         public SimpleJsonConsoleFormatter(IOptionsMonitor<JsonConsoleFormatterOptions> options)
>             : base("simplejson")
83,84d79
<                         writer.WriteStartObject(nameof(LogEntry<object>.State));
<                         writer.WriteString("Message", stateMessage);
92d86
<                         writer.WriteEndObject();
144d137
<                 writer.WriteStartArray("Scopes");
149,150d141
<                         state.WriteStartObject();
<                         state.WriteString("Message", scope.ToString());
155d145
<                         state.WriteEndObject();
162d151
<                 writer.WriteEndArray();
235a225,484
>         }
> 
>         internal sealed class PooledByteBufferWriter : PipeWriter, IDisposable
>         {
>             private const int MinimumBufferSize = 256;
> 
>             private ArrayBuffer _buffer;
>             private readonly Stream? _stream;
> 
>             public PooledByteBufferWriter(int initialCapacity)
>             {
>                 _buffer = new ArrayBuffer(initialCapacity, usePool: true);
>             }
> 
>             public PooledByteBufferWriter(int initialCapacity, Stream stream) : this(initialCapacity)
>             {
>                 _stream = stream;
>             }
> 
>             public ReadOnlySpan<byte> WrittenSpan => _buffer.ActiveSpan;
> 
>             public ReadOnlyMemory<byte> WrittenMemory => _buffer.ActiveMemory;
> 
>             public int Capacity => _buffer.Capacity;
> 
>             public void Clear() => _buffer.Discard(_buffer.ActiveLength);
> 
>             public void ClearAndReturnBuffers() => _buffer.ClearAndReturnBuffer();
> 
>             public void Dispose() => _buffer.Dispose();
> 
>             public void InitializeEmptyInstance(int initialCapacity)
>             {
>                 Debug.Assert(initialCapacity > 0);
>                 Debug.Assert(_buffer.ActiveLength == 0);
> 
>                 _buffer.EnsureAvailableSpace(initialCapacity);
>             }
> 
>             public static PooledByteBufferWriter CreateEmptyInstanceForCaching() => new PooledByteBufferWriter(initialCapacity: 0);
> 
>             public override void Advance(int count) => _buffer.Commit(count);
> 
>             public override Memory<byte> GetMemory(int sizeHint = MinimumBufferSize)
>             {
>                 Debug.Assert(sizeHint > 0);
> 
>                 _buffer.EnsureAvailableSpace(sizeHint);
>                 return _buffer.AvailableMemory;
>             }
> 
>             public override Span<byte> GetSpan(int sizeHint = MinimumBufferSize)
>             {
>                 Debug.Assert(sizeHint > 0);
> 
>                 _buffer.EnsureAvailableSpace(sizeHint);
>                 return _buffer.AvailableSpan;
>             }
> 
>             internal void WriteToStream(Stream destination) => destination.Write(_buffer.ActiveSpan);
> 
>             public override async ValueTask<FlushResult> FlushAsync(CancellationToken cancellationToken = default)
>             {
>                 Debug.Assert(_stream is not null);
>                 await _stream.WriteAsync(WrittenMemory, cancellationToken).ConfigureAwait(false);
>                 Clear();
> 
>                 return new FlushResult(isCanceled: false, isCompleted: false);
>             }
> 
>             public override bool CanGetUnflushedBytes => true;
>             public override long UnflushedBytes => _buffer.ActiveLength;
> 
>             // This type is used internally in JsonSerializer to help buffer and flush bytes to the underlying Stream.
>             // It's only pretending to be a PipeWriter and doesn't need Complete or CancelPendingFlush for the internal usage.
>             public override void CancelPendingFlush() => throw new NotImplementedException();
>             public override void Complete(Exception? exception = null) => throw new NotImplementedException();
>         }
> 
>         // Warning: Mutable struct!
>         // The purpose of this struct is to simplify buffer management.
>         // It manages a sliding buffer where bytes can be added at the end and removed at the beginning.
>         // [ActiveSpan/Memory] contains the current buffer contents; these bytes will be preserved
>         // (copied, if necessary) on any call to EnsureAvailableBytes.
>         // [AvailableSpan/Memory] contains the available bytes past the end of the current content,
>         // and can be written to in order to add data to the end of the buffer.
>         // Commit(byteCount) will extend the ActiveSpan by [byteCount] bytes into the AvailableSpan.
>         // Discard(byteCount) will discard [byteCount] bytes as the beginning of the ActiveSpan.
> 
>         [StructLayout(LayoutKind.Auto)]
>         internal struct ArrayBuffer : IDisposable
>         {
>             private static int ArrayMaxLength => Array.MaxLength;
> 
>             private readonly bool _usePool;
>             private byte[] _bytes;
>             private int _activeStart;
>             private int _availableStart;
> 
>             // Invariants:
>             // 0 <= _activeStart <= _availableStart <= bytes.Length
> 
>             public ArrayBuffer(int initialSize, bool usePool = false)
>             {
>                 Debug.Assert(initialSize > 0 || usePool);
> 
>                 _usePool = usePool;
>                 _bytes = initialSize == 0
>                     ? Array.Empty<byte>()
>                     : usePool ? ArrayPool<byte>.Shared.Rent(initialSize) : new byte[initialSize];
>                 _activeStart = 0;
>                 _availableStart = 0;
>             }
> 
>             public ArrayBuffer(byte[] buffer)
>             {
>                 Debug.Assert(buffer.Length > 0);
> 
>                 _usePool = false;
>                 _bytes = buffer;
>                 _activeStart = 0;
>                 _availableStart = 0;
>             }
> 
>             public void Dispose()
>             {
>                 _activeStart = 0;
>                 _availableStart = 0;
> 
>                 byte[] array = _bytes;
>                 _bytes = null!;
> 
>                 if (array is not null)
>                 {
>                     ReturnBufferIfPooled(array);
>                 }
>             }
> 
>             // This is different from Dispose as the instance remains usable afterwards (_bytes will not be null).
>             public void ClearAndReturnBuffer()
>             {
>                 Debug.Assert(_usePool);
>                 Debug.Assert(_bytes is not null);
> 
>                 _activeStart = 0;
>                 _availableStart = 0;
> 
>                 byte[] bufferToReturn = _bytes;
>                 _bytes = Array.Empty<byte>();
>                 ReturnBufferIfPooled(bufferToReturn);
>             }
> 
>             public int ActiveLength => _availableStart - _activeStart;
>             public Span<byte> ActiveSpan => new Span<byte>(_bytes, _activeStart, _availableStart - _activeStart);
>             public ReadOnlySpan<byte> ActiveReadOnlySpan => new ReadOnlySpan<byte>(_bytes, _activeStart, _availableStart - _activeStart);
>             public Memory<byte> ActiveMemory => new Memory<byte>(_bytes, _activeStart, _availableStart - _activeStart);
> 
>             public int AvailableLength => _bytes.Length - _availableStart;
>             public Span<byte> AvailableSpan => _bytes.AsSpan(_availableStart);
>             public Memory<byte> AvailableMemory => _bytes.AsMemory(_availableStart);
>             public Memory<byte> AvailableMemorySliced(int length) => new Memory<byte>(_bytes, _availableStart, length);
> 
>             public int Capacity => _bytes.Length;
>             public int ActiveStartOffset => _activeStart;
> 
>             public byte[] DangerousGetUnderlyingBuffer() => _bytes;
> 
>             public void Discard(int byteCount)
>             {
>                 Debug.Assert(byteCount <= ActiveLength, $"Expected {byteCount} <= {ActiveLength}");
>                 _activeStart += byteCount;
> 
>                 if (_activeStart == _availableStart)
>                 {
>                     _activeStart = 0;
>                     _availableStart = 0;
>                 }
>             }
> 
>             public void Commit(int byteCount)
>             {
>                 Debug.Assert(byteCount <= AvailableLength);
>                 _availableStart += byteCount;
>             }
> 
>             // Ensure at least [byteCount] bytes to write to.
>             [MethodImpl(MethodImplOptions.AggressiveInlining)]
>             public void EnsureAvailableSpace(int byteCount)
>             {
>                 if (byteCount > AvailableLength)
>                 {
>                     EnsureAvailableSpaceCore(byteCount);
>                 }
>             }
> 
>             private void EnsureAvailableSpaceCore(int byteCount)
>             {
>                 Debug.Assert(AvailableLength < byteCount);
> 
>                 if (_bytes.Length == 0)
>                 {
>                     Debug.Assert(_usePool && _activeStart == 0 && _availableStart == 0);
>                     _bytes = ArrayPool<byte>.Shared.Rent(byteCount);
>                     return;
>                 }
> 
>                 int totalFree = _activeStart + AvailableLength;
>                 if (byteCount <= totalFree)
>                 {
>                     // We can free up enough space by just shifting the bytes down, so do so.
>                     Buffer.BlockCopy(_bytes, _activeStart, _bytes, 0, ActiveLength);
>                     _availableStart = ActiveLength;
>                     _activeStart = 0;
>                     Debug.Assert(byteCount <= AvailableLength);
>                     return;
>                 }
> 
>                 int desiredSize = ActiveLength + byteCount;
> 
>                 if ((uint)desiredSize > ArrayMaxLength)
>                 {
>                     throw new OutOfMemoryException();
>                 }
> 
>                 // Double the existing buffer size (capped at Array.MaxLength).
>                 int newSize = Math.Max(desiredSize, (int)Math.Min(ArrayMaxLength, 2 * (uint)_bytes.Length));
> 
>                 byte[] newBytes = _usePool ?
>                     ArrayPool<byte>.Shared.Rent(newSize) :
>                     new byte[newSize];
>                 byte[] oldBytes = _bytes;
> 
>                 if (ActiveLength != 0)
>                 {
>                     Buffer.BlockCopy(oldBytes, _activeStart, newBytes, 0, ActiveLength);
>                 }
> 
>                 _availableStart = ActiveLength;
>                 _activeStart = 0;
> 
>                 _bytes = newBytes;
>                 ReturnBufferIfPooled(oldBytes);
> 
>                 Debug.Assert(byteCount <= AvailableLength);
>             }
> 
>             public void Grow()
>             {
>                 EnsureAvailableSpaceCore(AvailableLength + 1);
>             }
> 
>             [MethodImpl(MethodImplOptions.AggressiveInlining)]
>             private void ReturnBufferIfPooled(byte[] buffer)
>             {
>                 // The buffer may be Array.Empty<byte>()
>                 if (_usePool && buffer.Length > 0)
>                 {
>                     ArrayPool<byte>.Shared.Return(buffer);
>                 }
>             }
